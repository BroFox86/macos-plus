"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Expandable elements that triggered by buttons with '.js-collapse-trigger'
 * class and the data-target with their selector.
 * @version 5.0.3
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
var Collapse =
/*#__PURE__*/
function () {
  function Collapse() {
    _classCallCheck(this, Collapse);
  }

  _createClass(Collapse, [{
    key: "listen",
    value: function listen() {
      var _this = this;

      document.addEventListener("click", function (event) {
        var trigger;
        var targets;

        if (!event.target || !event.target.matches(".js-collapse-trigger")) {
          return;
        }

        event.preventDefault();
        trigger = event.target;
        targets = document.querySelectorAll(trigger.dataset.target);

        _this._handle(trigger, targets);
      });
    }
  }, {
    key: "_handle",
    value: function _handle(trigger, targets) {
      if (!trigger.matches(".pending")) {
        trigger.classList.add("pending");
        setTimeout(function () {
          trigger.classList.remove("pending");
        }, this._getDuration(targets[0]));
      } else {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = targets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var target = _step.value;

          if (!trigger.matches(".is-active")) {
            this._slideDown(target);
          } else {
            this._slideUp(target);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      trigger.classList.toggle("is-active");
    }
  }, {
    key: "_slideDown",
    value: function _slideDown(target) {
      var style = target.style;

      var paddingTop = this._getStyle(target, "padding-top");

      var paddingBottom = this._getStyle(target, "padding-bottom");

      var duration = this._getDuration(target);

      var height;
      style.overflow = "hidden";
      style.display = "block";
      height = target.offsetHeight;
      style.transition = "none";
      style.height = style.paddingTop = style.paddingBottom = 0;
      setTimeout(function () {
        style.transition = "";
        style.height = "".concat(height, "px");
        style.paddingTop = "".concat(paddingTop, "px");
        style.paddingBottom = "".concat(paddingBottom, "px");
        setTimeout(function () {
          style.overflow = "";
        }, duration);
      }, 20);
    }
  }, {
    key: "_slideUp",
    value: function _slideUp(target) {
      var style = target.style;
      style.overflow = "hidden";
      style.height = style.paddingTop = style.paddingBottom = 0;
      setTimeout(function () {
        target.removeAttribute("style");
      }, this._getDuration(target));
    }
  }, {
    key: "_getStyle",
    value: function _getStyle(element, property) {
      return parseFloat(getComputedStyle(element)[property]);
    }
  }, {
    key: "_getDuration",
    value: function _getDuration(element) {
      return parseFloat(getComputedStyle(element).transitionDuration) * 1000;
    }
  }]);

  return Collapse;
}();

var collapse = new Collapse();
collapse.listen();
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Сopy URL of the current page.
 * @augments Collapse
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
var Copy =
/*#__PURE__*/
function (_Collapse) {
  _inherits(Copy, _Collapse);

  function Copy() {
    var _this;

    _classCallCheck(this, Copy);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Copy).call(this));
    _this._trigger = document.querySelector(".js-copy-url-trigger");
    _this._field = document.querySelector(".js-copy-url-field");
    _this._wrapper = _this._field.parentElement;
    return _this;
  }

  _createClass(Copy, [{
    key: "listen",
    value: function listen() {
      this._trigger.addEventListener("click", this._handle.bind(this));
    }
  }, {
    key: "_handle",
    value: function _handle() {
      var _this2 = this;

      var duration = this._getDuration(this._wrapper);

      _get(_getPrototypeOf(Copy.prototype), "_handle", this).call(this, this._trigger, [this._wrapper]);

      setTimeout(function () {
        _this2._copyUrl();

        setTimeout(function () {
          _this2._showMessage();
        }, duration);
      }, duration);
    }
  }, {
    key: "_copyUrl",
    value: function _copyUrl() {
      this._field.value = window.location.href.replace(/\#\d$/i, "");

      this._field.focus();

      this._field.select();

      document.execCommand("Copy");
    }
  }, {
    key: "_showMessage",
    value: function _showMessage() {
      this._field.blur();

      this._field.value = "Ссылка скопирована!";
    }
  }]);

  return Copy;
}(Collapse);

var copyUrl = new Copy();
copyUrl.listen();
"use strict";

/**
 * Wrapper function that set a specific time unit from days.
 */
function setDate(calcDiff, localizeUnits) {
  "use strict";

  return function (selector) {
    var element = document.querySelector(selector);
    if (!element) return;
    var modifiedDate = element.getAttribute("datetime");
    var days = calcDiff(modifiedDate);
    var amount;
    var units;

    if (days <= 2) {
      if (days <= 0) {
        element.innerHTML = "Обновлено сегодня.";
      }

      if (days == 1) {
        element.innerHTML = "Обновлено вчера.";
      }

      if (days == 2) {
        element.innerHTML = "Обновлено позавчера.";
      }

      return;
    }

    if (days <= 6) {
      amount = days;
      units = localizeUnits("days", amount);
    } else if (days <= 27) {
      amount = Math.floor(days / 7);
      units = localizeUnits("weeks", amount);
    } else if (days >= 28 && days < 365) {
      amount = days < 30 ? 1 : Math.floor(days / 30);
      units = localizeUnits("months", amount);
    } else if (days >= 365) {
      amount = Math.floor(days / 365);
      units = localizeUnits("years", amount);
    }

    switch (amount) {
      case 1:
        element.innerHTML = "\u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u043E ".concat(units, " \u043D\u0430\u0437\u0430\u0434.");
        break;

      default:
        element.innerHTML = "\u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u043E ".concat(amount, " ").concat(units, " \u043D\u0430\u0437\u0430\u0434.");
        break;
    }
  };
}
/**
 * Calculate interval between dates in days.
 * @param {string} modDate - Modified date in MM-DD-YYYY format.
 * @returns {number} - Amount of days.
 */


function calcDiff(modDate) {
  var currentDate = new Date();
  var modifiedDate = new Date(modDate);
  var DAY_MS = 86400000;
  return Math.floor((currentDate - modifiedDate) / DAY_MS);
}
/**
 * Set the name of time units in accordance with Russian grammar.
 * @param {string} units - Name of time units in English.
 * @param {number} amount - Amount of time units.
 * @returns {string} - Name of time units with decline.
 */


function localizeUnits(units, amount) {
  switch (units) {
    case "days":
      return amount == 1 ? "день" : amount <= 4 ? "дня" : "дней";

    case "weeks":
      return amount == 1 ? "неделю" : "недели";

    case "months":
      return amount == 1 ? "месяц" : amount <= 4 ? "месяца" : "месяцев";

    case "years":
      return amount == 1 ? "год" : amount <= 4 ? "года" : "лет";
  }
}

var setRelativeDate = setDate(calcDiff, localizeUnits);
setRelativeDate(".js-date-modified");
"use strict";

/**
 * Asynchronous image that become visible if they get in on the specific
 * scroll position.
 * @param {number} options.actualWidth - Images width.
 * @param {string} options.breakpoint - Media query for case where images are fill the container.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function handleLoadImages(_ref) {
  var actualWidth = _ref.actualWidth,
      breakpoint = _ref.breakpoint;
  var images = document.querySelectorAll("[data-src]");
  window.addEventListener("DOMContentLoaded", setImageSizes);
  window.addEventListener("DOMContentLoaded", handle);
  window.addEventListener("scroll", handle);
  /*
   * Specify image sizes to prevent bounces when the page is scrolling
   * and images aren't yet loaded.
   */

  function setImageSizes() {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = images[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var image = _step.value;
        var size = image.dataset.size;
        var _ref2 = [size.split("x")[0], size.split("x")[1]],
            width = _ref2[0],
            height = _ref2[1];
        var aspectRatio = width / height;

        if (window.matchMedia("(".concat(breakpoint, ")")).matches) {
          actualWidth = image.parentElement.offsetWidth;
        }

        var actualHeight = Math.floor(actualWidth / aspectRatio);
        var _ref3 = [actualWidth, actualHeight];
        image.width = _ref3[0];
        image.height = _ref3[1];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  function handle() {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = images[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var image = _step2.value;
        var isLoaded = image.dataset.src == "loaded";

        if (isLoaded || !isInArea(image)) {
          continue;
        }

        loadImage(image);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  function isInArea(image) {
    var bottomViewport = pageYOffset + document.documentElement.clientHeight;
    var elementTop = image.getBoundingClientRect().top + pageYOffset;
    var offset = document.documentElement.clientHeight;

    if (bottomViewport > elementTop - offset) {
      return true;
    }
  }

  function loadImage(image) {
    var preloadImg = document.createElement("img");
    var src = image.dataset.src;
    var style = image.style;
    image.dataset.src = "loaded";
    preloadImg.setAttribute("src", src);

    preloadImg.onload = function () {
      style.transition = "none";
      style.opacity = 0;
      setTimeout(function () {
        style.transition = "";
        style.opacity = 1;
        image.setAttribute("src", src);
        /*
         * Clear size attributes after the image load
         * in order to change their size dynamically when resizing the page.
         */

        image.removeAttribute("width");
        image.removeAttribute("height");
      }, 20);
    };
  }
}

handleLoadImages({
  actualWidth: 530,
  breakpoint: "max-width: 600px"
});
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Open original size images in the modal window.
 * @augments Modal
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
var Lightbox =
/*#__PURE__*/
function (_Modal) {
  _inherits(Lightbox, _Modal);

  function Lightbox() {
    var _this;

    _classCallCheck(this, Lightbox);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Lightbox).call(this));
    _this._modal = document.querySelector(".js-lightbox-toggle");
    _this._image = _this._modal.querySelector("img");
    _this._duration = _this._getDuration(_this._modal);
    return _this;
  }

  _createClass(Lightbox, [{
    key: "listen",
    value: function listen() {
      var closeButton = this._modal.querySelector(".js-lightbox-dismiss");

      closeButton.addEventListener("click", this._close.bind(this));
      document.addEventListener("click", this._open.bind(this));
    }
  }, {
    key: "_open",
    value: function _open(event) {
      var target = event.target;

      while (target != document.body) {
        if (!target.classList.contains("js-lightbox-trigger")) {
          target = target.parentElement;
          continue;
        }

        event.preventDefault();

        this._showImage(target);

        _get(_getPrototypeOf(Lightbox.prototype), "_open", this).call(this);

        return;
      }
    }
  }, {
    key: "_showImage",
    value: function _showImage(target) {
      var _this2 = this;

      var imgSrc = target.getAttribute("href");
      var preloadImg = document.createElement("img");
      this._originSrc = this._image.src;
      preloadImg.src = imgSrc;

      preloadImg.onload = function () {
        _this2._image.src = imgSrc;
      };
    }
  }, {
    key: "_close",
    value: function _close() {
      _get(_getPrototypeOf(Lightbox.prototype), "_close", this).call(this);

      this._removeImage();
    }
  }, {
    key: "_removeImage",
    value: function _removeImage() {
      var _this3 = this;

      setTimeout(function () {
        _this3._image.src = _this3._originSrc;
      }, this._duration);
    }
  }]);

  return Lightbox;
}(Modal);

var lightbox = new Lightbox();
lightbox.listen();
"use strict";

/**
 * Open external links in new tabs.
 */
{
  var SELECTORS = 'a[href^="http://"], a[href^="https://"]';
  var links = document.querySelectorAll(SELECTORS);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var link = _step.value;
      link.target = "_blank";
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
"use strict";

/**
 * Add custom characters to ordered lists.
 * @param {string} options.list - Ordered lists selector.
 * @param {string} options.items - Characters.
 * @param {string} options.closing - Closing symbol.
 * @version 1.0.2
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function setCustomList(_ref) {
  var selector = _ref.selector,
      items = _ref.items,
      closing = _ref.closing;
  var style = document.createElement("style");
  document.head.append(style);
  items.split("").forEach(function (item, index) {
    style.sheet.insertRule("".concat(selector, " > li:nth-child( ").concat(index + 1, " )::before {\n        content: \"").concat(item).concat(closing, "\";\n      }"), 0);
  });
}

setCustomList({
  selector: "ol ol",
  items: "абвгдежзиклмнопрстуфхцчшщэюя",
  closing: ")"
});
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Modal =
/*#__PURE__*/
function () {
  function Modal() {
    _classCallCheck(this, Modal);
  }

  _createClass(Modal, [{
    key: "_open",
    value: function _open() {
      var _this = this;

      this._togglePageScroll();

      this._modal.style.display = "block";
      setTimeout(function () {
        _this._modal.classList.add("is-visible");
      }, 20);
    }
  }, {
    key: "_close",
    value: function _close() {
      var _this2 = this;

      this._modal.classList.remove("is-visible");

      this._togglePageScroll();

      setTimeout(function () {
        _this2._modal.style.display = "";
      }, this._duration);
    }
  }, {
    key: "_togglePageScroll",
    value: function _togglePageScroll() {
      var body = document.body;
      var scrollbar = window.innerWidth - document.documentElement.clientWidth;

      if (!body.classList.contains("is-fixed")) {
        body.classList.add("is-fixed");
        body.style.paddingRight = "".concat(scrollbar, "px");
      } else {
        body.classList.remove("is-fixed");
        body.style.paddingRight = "";
      }
    }
  }, {
    key: "_getDuration",
    value: function _getDuration(element) {
      return parseFloat(getComputedStyle(element).transitionDuration) * 1000;
    }
  }]);

  return Modal;
}();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Scroll page to top.
 * @param {string} options.selector - Button selector.
 * @param {number} [options.step=150] - Animation speed in pixels.
 * @version 4.0.1
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
var ScrollButton =
/*#__PURE__*/
function () {
  function ScrollButton(options) {
    _classCallCheck(this, ScrollButton);

    this._button = document.querySelector(options.button);
    this._step = options.step || 150;
  }

  _createClass(ScrollButton, [{
    key: "listenButton",
    value: function listenButton() {
      this._button.onclick = this.scrollUp.bind(this);
    }
  }, {
    key: "scrollUp",
    value: function scrollUp() {
      var _this = this;

      var timeOut;

      if (document.documentElement.scrollTop != 0 || document.body.scrollTop != 0) {
        window.scrollBy(0, -this._step);
        timeOut = setTimeout(function () {
          _this.scrollUp();
        }, 20);
      } else {
        clearTimeout(timeOut);
      }
    }
    /**
     * @param {number} threshold - Offset from top that show up the button.
     */

  }, {
    key: "handleVisibility",
    value: function handleVisibility(threshold) {
      var _this2 = this;

      window.addEventListener("scroll", function () {
        if (pageYOffset > threshold) {
          _this2._button.classList.add("is-active");
        } else {
          _this2._button.classList.remove("is-active");
        }
      });
    }
  }]);

  return ScrollButton;
}();

var scrollButton = new ScrollButton({
  button: ".js-scroll-button-toggle",
  step: 300
});
scrollButton.listenButton();
scrollButton.handleVisibility(document.documentElement.clientHeight * 1.5);
"use strict";

/**
 * Show the current position by selecting a contents item.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
(function () {
  "use strict";

  var headings = document.querySelectorAll(".js-scrollspy-toggle");
  var contents = document.querySelector(".js-scrollspy-target");
  var items = contents.querySelectorAll("li");
  ["scroll", "DOMContentLoaded"].forEach(function (item) {
    window.addEventListener(item, select);
  });

  function select() {
    var activeElement = getActiveElement();

    if (!activeElement) {
      return;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;
        item.classList.remove("is-active");
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    items[activeElement.id - 1].classList.add("is-active");
  }

  var getActiveElement = function () {
    var previousItem;
    var currentItem;
    return function () {
      var sum = headings.length;

      while (sum--) {
        if (isInArea(headings[sum])) {
          currentItem = headings[sum];

          if (currentItem == previousItem) {
            return false;
          }

          return previousItem = currentItem;
        }
      }
    };
  }();

  function isInArea(element) {
    var viewportTop = pageYOffset;
    var elementTop = element.getBoundingClientRect().top + pageYOffset;
    var OFFSET = 300;

    if (viewportTop > elementTop - OFFSET) {
      return true;
    }
  }
})();
"use strict";

/**
 * Share the current URL on a social network by opening a new window.
 * @param {number} windowWidth - Window width.
 * @param {number} windowHeight - Window height.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function sharePage(windowWidth, windowHeight) {
  "use strict";

  document.body.addEventListener("click", function (event) {
    var target = event.target;

    while (target != document.body) {
      if (!target.classList.contains("js-share-trigger")) {
        target = target.parentElement;
        continue;
      }

      event.preventDefault();
      openWindow(target);
      break;
    }
  });

  function openWindow(element) {
    var width = "width=".concat(windowWidth);
    var height = "height=".concat(windowHeight);
    window.open(getUrl(element), "", "".concat(width, ", ").concat(height));
  } // Get URL without an anchor and make it ready to share.


  function getUrl(element) {
    var url = window.location.href.replace(/\#\d$/, "");
    return element.href.replace(/[^=]*$/, url);
  }
}

sharePage(500, 600);
"use strict";

/**
 * Handle flying tooltips.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
(function () {
  "use strict";

  var trigger;
  var title;
  var tooltip;
  document.addEventListener("mouseover", function (event) {
    var button;

    if (!event.target.classList.contains("js-tooltip-trigger")) {
      return;
    }

    trigger = event.target;
    title = trigger.title;
    trigger.title = "";
    tooltip = document.createElement("aside");
    tooltip.className = "tooltip";
    button = '<button class="tooltip__close" type="button"></button>';
    tooltip.innerHTML = title + button;
    document.body.append(tooltip);
  });
  document.addEventListener("mousemove", function (event) {
    if (!event.target.classList.contains("js-tooltip-trigger")) {
      return;
    }

    tooltip.style.left = "".concat(event.pageX + 20, "px");
    tooltip.style.top = "".concat(event.pageY + 10, "px");
  });
  document.addEventListener("mouseout", function (event) {
    if (!event.target.classList.contains("js-tooltip-trigger")) {
      return;
    }

    trigger.title = tooltip.textContent;
    document.body.removeChild(tooltip);
  });
})();