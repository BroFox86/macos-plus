(function() {
  "use strict";

  /**
   * Expandable elements that triggered by buttons with '.js-collapse-trigger'
   * class and the data-target with their selector.
   * @version 4.0.2
   * @author Daur Gamisonia <daurgam@gmail.com>
   */
  window.Collapse = function Collapse() {};

  /**
   * Listen button.
   * @public
   */
  Collapse.prototype.listen = function() {
    document.addEventListener( "click", this._initialize.bind(this) );
  };

  /**
   * Get target elements from the event.
   * @protected
   */
  Collapse.prototype._initialize = function( event ) {
    var eventTarget = event.target;
    var targets;
    var trigger;

    while( true ) {

      if ( !eventTarget ) {
        return;
      }

      if ( !eventTarget.classList.contains("js-collapse-trigger") ) {

        eventTarget = eventTarget.parentElement;

        continue;
      }

      event.preventDefault();

      trigger = eventTarget;

      targets = document.querySelectorAll( trigger.getAttribute("data-target") );

      this._handle( trigger, targets );

      return;
    }
  };

  /**
   * Handle transition.
   * @protected
   * @param {HTMLElement} trigger - Button element.
   * @param {HTMLElement[]} targets - Target elements.
   */
  Collapse.prototype._handle = function( trigger, targets ) {
    var duration = this._getDuration( targets[0] );
    var target;

    if ( !trigger.classList.contains("pending") ) {

      trigger.classList.add("pending");

      setTimeout(function() {

        trigger.classList.remove("pending");

      }, duration );

    } else {

      return;
    }

    for ( var i = 0; i < targets.length; i++ ) {
      target = targets[i];

      if ( !trigger.classList.contains("is-active") ) {
        this._slideDown( target );

      } else {
        this._slideUp( target );
      }
    }

    trigger.classList.toggle("is-active");
  };

  /**
   * Expand the element.
   * @protected
   */
  Collapse.prototype._slideDown = function( target ) {
    var style = target.style;
    var paddingTop = this._getStyle( target, "padding-top" );
    var paddingBottom = this._getStyle( target, "padding-bottom" );
    var duration = this._getDuration( target );
    var height;

    style.overflow = "hidden";

    style.display = "block";

    height = target.offsetHeight;

    style.transition = "none";

    style.height = "0";

    style.paddingTop = "0";

    style.paddingBottom = "0";

    setTimeout(function() {

      style.transition = "";

      style.height = height + "px";

      style.paddingTop = paddingTop + "px";

      style.paddingBottom = paddingBottom + "px";

      setTimeout(function() {

        style.overflow = "";

      }, duration );

    }, 10 );
  };

  /**
   * Roll up.
   * @protected
   */
  Collapse.prototype._slideUp = function( target ) {
    var style = target.style;
    var duration = this._getDuration( target );

    style.overflow = "hidden";

    style.height = "0";

    style.paddingTop = "0";

    style.paddingBottom = "0";

    setTimeout(function() {

      target.removeAttribute("style");

    }, duration );
  };

  /**
   * Get transition duration.
   * @protected
   */
  Collapse.prototype._getDuration = function( element ) {
    var duration = parseFloat( getComputedStyle( element ).transitionDuration );

    // Get ms from sec.
    return duration * 1000;
  };

  /**
   * Get style value.
   * @protected
   */
  Collapse.prototype._getStyle = function( element, property ) {
    var value = getComputedStyle( element )[property];

    return parseFloat( value );
  };

  var collapse = new Collapse();

  collapse.listen();

})();
/**
 * Wrapper function that set a specific time unit from days.
 */
function setDate( calcDiff, localizeUnits ) {
  "use strict";

  return function() {
    var element = document.querySelector( arguments[0] );

    if ( !element ) {
      return;
    }

    var modifiedDate = element.getAttribute("datetime");
    var days = calcDiff( modifiedDate );
    var amount;
    var units;

    if ( days == 0 ) {

      element.innerHTML = "Обновлено сегодня.";

      return;
    }

    else if ( days == 1 ) {

      element.innerHTML = "Обновлено вчера.";

      return;
    }

    else if ( days == 2 ) {

      element.innerHTML = "Обновлено позавчера.";

      return;
    }

    else if ( days <= 6 ) {

      amount = days;

      units = localizeUnits( "days", amount );
    }

    else if ( days <= 27 ) {

      amount = Math.floor( days / 7 );

      units = localizeUnits( "weeks", amount );
    }

    else if ( days >= 28 && days < 365 ) {

      amount = ( days < 30 ) ? 1 : Math.floor( days / 30 );

      units = localizeUnits( "months", amount );
    }

    else if ( days >= 365 ) {

      amount = Math.floor( days / 365 );

      units = localizeUnits( "years", amount );
    }

    switch( amount ) {
      case 1:
        element.innerHTML = "Обновлено " + units + " назад.";
        break;

      default:
        element.innerHTML = "Обновлено " + amount + " " + units + " назад.";
        break;
    }
  };
}

/**
 * Calculate interval between dates in days.
 * @param {string} modDate - Modified date in MM-DD-YYYY format.
 * @returns {number|undefined} - Amount of days.
 */
function calcDiff( modDate ) {
  var date = new Date();
  var current = new Date( date.getFullYear(), date.getMonth(), date.getDate() );
  var modified = new Date( modDate ).setHours( 0 );
  var DAY = 86400000; // ms
  var days = Math.floor( (current - modified) / DAY );

  days = ( days >= 0 ) ? days : undefined;

  return days;
}

/**
 * Set the name of time units in accordance with Russian grammar.
 * @param {string} units - Name of time units in English.
 * @param {number} amount - Amount of time units.
 * @returns {string} - Name of time units with decline.
 */
function localizeUnits( units, amount ) {

  switch( units ) {

    case "days":
      return  ( amount == 1 ) ? "день"
            : ( amount <= 4 ) ? "дня"
            : "дней";

    case "weeks":
      return ( amount == 1 ) ? "неделю": "недели";

    case "months":
      return  ( amount == 1 ) ? "месяц"
            : ( amount <= 4 ) ? "месяца"
            : "месяцев";

    case "years":
      return  ( amount == 1 ) ? "год"
            : ( amount <= 4 ) ? "года"
            : "лет";
  }
}

// Add a relative date of a post from the published date to the modified date.
var relativeDate = setDate( calcDiff, localizeUnits );

relativeDate(".js-date-modified");
/**
 * Table of contents with show the current position by selecting an item.
 * @param {number} offset - Threshold from top of the screen in pixels that triggers selecting an item.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function ScrollSpy( offset ) {
  "use strict";

  var contents = document.querySelector(".js-scrollspy-target");
  var items = contents.querySelectorAll("li");
  var headings = document.querySelectorAll(".js-scrollspy-toggle");

  offset = offset || 0;

  function selectItem() {
    var activeElement = getActiveElement();
    var id;

    if ( !activeElement ) {
      return;
    }

    clearSelection();

    id = activeElement.id;

    items[id - 1].classList.add("is-active");
  }

  var getActiveElement = (function() {
    var previousItem;
    var currentItem;

    return function() {
      var length = headings.length;

      while( length-- ) {

        if ( isInArea( headings[length] ) ) {

          currentItem = headings[length];

          break;
        }
      }

      if ( currentItem == previousItem ) {
        return false;
      }

      previousItem = currentItem;

      return currentItem;
    };
  })();

  function isInArea( element ) {
    var viewportTop = pageYOffset;
    var elementTop = element.getBoundingClientRect().top + pageYOffset;

    if ( viewportTop > (elementTop - offset) ) {
      return true;
    }
  }

  function clearSelection() {
    for ( var i = 0; i < items.length; i++ ) {
      items[i].classList.remove("is-active");
    }
  }

  ["scroll", "DOMContentLoaded"].forEach(function( item ) {
    window.addEventListener( item, selectItem );
  });
}

var contents = new ScrollSpy( 300 );
/**
 * Asynchronous images that become visible if they get in on the specific scroll positions.
 * @param {number} options.width - Images width.
 * @param {string} options.fullWidth - Media query string for case where images are fill the container.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function handleImageLoading( options ) {
  "use strict";

  var images = document.querySelectorAll("[data-src]");
  var userAgent = window.navigator.userAgent;

  if ( userAgent.match("Trident") && userAgent.match("Edge") ) {
    changePreloader();
  }

  /*
   * Specify image sizes to prevent bounces when the page is scrolling
   * and images aren't yet loaded. Timeout sets it after loading
   * styles to avoid bounces when loading the page.
   */
  setTimeout(function() {
    for ( var i = 0; i < images.length; i++ ) {
      var image = images[i];
      // String with image resolution e.g 1024x768.
      var imageSize = image.getAttribute("data-size");
      var divider = imageSize.search(/[xX,/-]/);
      var width = imageSize.slice( 0, divider );
      var height = imageSize.slice( divider + 1 );
      var aspectRatio = width / height;
      var actualWidth = options.width;
      var actualHeight;

      if ( window.matchMedia( options.fullWidth ).matches ) {
        actualWidth = image.parentElement.offsetWidth;
      }

      actualHeight = Math.floor( actualWidth / aspectRatio );

      image.setAttribute( "width", actualWidth );

      image.setAttribute( "height", actualHeight );
    }
  }, 500 );

  function getImage() {
    var image;
    var isLoaded;

    for ( var i = 0; i < images.length; i++ ) {

      image = images[i];

      isLoaded = image.getAttribute("data-src") == "loaded";

      if ( isLoaded || !isInArea( image ) ) {
        continue;
      }

      loadImage( image );
    }
  }

  function loadImage( image ) {
    var preloadImg = document.createElement("img");
    var src = image.getAttribute("data-src");
    var style = image.style;

    image.setAttribute( "data-src", "loaded" );

    preloadImg.setAttribute( "src", src );

    preloadImg.onload = function() {

      style.transition = "none";

      style.opacity = 0;

      setTimeout(function() {

        style.transition = "";

        style.opacity = 1;

        image.setAttribute( "src", src );

      }, 20 );
    };

    /*
     * Clear size attributes after the image loading
     * in order to change their size dynamically when resizing the page.
     */
    image.onload = function() {

      this.removeAttribute("width");

      this.removeAttribute("height");
    };
  }

  function isInArea( element ) {
    var bottomViewport = pageYOffset + document.documentElement.clientHeight;
    var elementTop = element.getBoundingClientRect().top + pageYOffset;
    var offset = document.documentElement.clientHeight;

    if ( bottomViewport > (elementTop - offset) ) {
      return true;
    }
  }

  // Change preloader image from *.svg to *.gif for IE/Edge.
  function changePreloader() {
    var image;
    var newSrc;

    for ( var i = 0; i < images.length; i++ ) {

      image = images[i];

      newSrc = image.getAttribute("src").replace( /(\.[\w\d]+)$/, ".gif" );

      image.setAttribute( "src", newSrc );
    }
  }

  ["DOMContentLoaded", "scroll"].forEach(function( item ) {
    window.addEventListener( item, getImage );
  });
}

handleImageLoading({
  width: 530,
  fullWidth: "(max-width: 600px)"
});
(function() {
  "use strict";

  /**
   * Toggle modal window.
   */
  window.Modal = function Modal() {};

  Modal.prototype._open = function() {
    var modal = this._modal;

    this._toggleScroll();

    modal.style.display = "block";

    setTimeout(function() {

      modal.classList.add("is-visible");

    }.bind(this), 20 );
  };

  Modal.prototype._close = function() {
    var modal = this._modal;
    var duration = this._duration;

    modal.classList.remove("is-visible");

    this._toggleScroll();

    setTimeout(function() {

      modal.style.display = "";

    }.bind(this), duration );
  };

  Modal.prototype._toggleScroll = function() {
    var body = document.body;
    var scrollbar = window.innerWidth - document.documentElement.clientWidth;

    if ( !body.classList.contains("is-fixed") ) {

      body.style.paddingRight = scrollbar + "px";

      body.classList.add("is-fixed");

    } else {

      body.style.paddingRight = "";

      body.classList.remove("is-fixed");
    }
  };

  // Get transition duration.
  Modal.prototype._getDuration = function( element ) {
    var duration = parseFloat( getComputedStyle( element ).transitionDuration );

    // Get ms from sec.
    return duration * 1000;
  };

})();
/**
 * Open original size images in the modal window.
 * @augments Modal
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
class Lightbox extends Modal {

  constructor() {
    super();
    this._modal = document.querySelector(".js-lightbox-toggle");
    this._image = this._modal.querySelector("img");
    this._duration = this._getDuration( this._modal );
  }

  listen() {
    const closeButton = this._modal.querySelector(".js-lightbox-dismiss");

    closeButton.addEventListener( "click", this._close.bind(this) );

    document.addEventListener( "click", this._open.bind(this) );
  }

  _open( event ) {
    let target = event.target;

    while( target != document.body ) {

      if ( !target.classList.contains("js-lightbox-trigger") ) {

        target = target.parentElement;

        continue;
      }

      event.preventDefault();

      this._showImage( target );

      super._open();

      return;
    }
  }

  _showImage( target ) {
    const imgSrc = target.getAttribute("href");
    const preloadImg = document.createElement("img");

    this._originSrc = this._image.src;

    preloadImg.src = imgSrc;

    preloadImg.onload = () => {
      this._image.src = imgSrc;
    };
  }

  _close() {
    super._close();
    this._removeImage();
  }

  _removeImage() {
    setTimeout(() => {
      this._image.src = this._originSrc;
    }, this._duration );
  }
}

const lightbox = new Lightbox();

lightbox.listen();
/**
 * Handle flying tooltips.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Tooltip() {
  "use strict";

  var tooltip = document.querySelector(".js-tooltip-body");
  var trigger;
  var title;
  var content;

  function handle( event ) {

    trigger = event.target;

    if ( !trigger.classList.contains("js-tooltip-trigger") ) {
      return;
    }

    if ( tooltip.classList.contains("is-active") ) {
      hide();
      return;
    }

    show();
  }

  function show() {

    title = trigger.title;

    trigger.title = "";

    content = document.createElement("div");

    content.innerText = title;

    tooltip.appendChild( content );

    tooltip.classList.add("is-active");
  }

  function hide() {

    tooltip.classList.remove("is-active");

    trigger.title = content.innerText;

    tooltip.removeChild( content );
  }

  function move( event ) {

    if ( !tooltip.classList.contains("is-active") ) {
      return;
    }

    tooltip.style.left = event.pageX + 20 + "px";

    tooltip.style.top = event.pageY + 10 + "px";
  }

  document.addEventListener( "mouseover", handle );

  document.addEventListener( "mouseout", handle );

  document.addEventListener( "mousemove", move );
}

var tooltip = new Tooltip();
/**
 * Open external links in new tabs.
 */
{
  const SELECTORS = 'a[href^="http://"], a[href^="https://"]';
  const links = document.querySelectorAll( SELECTORS );

  for ( let link of links ) {
    link.target = "_blank";
  }
}
/**
 * Add custom characters to ordered lists.
 * @param {string} options.list - Ordered lists selector.
 * @param {string} options.items - Characters.
 * @param {string} options.closing - Closing symbol.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function setCustomList( options ) {
  "use strict";

  var items = options.items;
  var selector = options.list;
  var closing = options.closing;
  var style = document.createElement("style");

  document.head.appendChild( style );

  items.split("").forEach(function( item, i ) {

    style.sheet.insertRule(

      selector + "> li:nth-child("+ (i + 1) + ")::before {" +
        "content:'" + item + closing + "'}", 0 );
  });
}

setCustomList({
  list: "ol ol",
  items: "абвгдежзиклмнопрстуфхцчшщэюя",
  closing: ")"
});
/**
 * Share the current URL on a social network by opening a new window.
 * @param {number} windowWidth - Window width.
 * @param {number} windowHeight - Window height.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Share( windowWidth, windowHeight ) {
  "use strict";

  document.body.addEventListener("click", function( event ) {
    var target = event.target;

    while( target != document.body ) {

      if ( !target.classList.contains("js-share-trigger") ) {

        target = target.parentElement;

        continue;
      }

      event.preventDefault();

      openWindow( target );

      break;
    }
  });

  // Open the new window.
  function openWindow( element ) {
    var width = "width=" + windowWidth;
    var height = "height=" + windowHeight;

    window.open( getUrl( element ), "", width + "," + height );
  }

  // Get URL without an anchor and make it ready to share.
  function getUrl( element ) {
    var url = window.location.href.replace( /\#\d$/i, "" );

    return element.href.replace( /[^=]*$/, url );
  }
}

var share = new Share( 500, 600 );
(function() {
  "use strict";

  /**
   * Сopy URL of the current page.
   * @augments Collapse
   * @author Daur Gamisonia <daurgam@gmail.com>
   */
  function Copy() {
    this._trigger = document.querySelector(".js-copy-url-trigger");
    this._field = document.querySelector(".js-copy-url-field");
    this._wrapper = this._field.parentElement;
  }

  Copy.prototype = Object.create( Collapse.prototype );
  Copy.prototype.constructor = Copy;

  Copy.prototype._handle = function() {
    var duration = this._getDuration( this._wrapper );

    Collapse.prototype._handle.call( this, this._trigger, [this._wrapper]);

    setTimeout(function() {

      this._copyUrl();

      setTimeout(function() {

        this._showMessage();

      }.bind(this), duration );

    }.bind(this), duration );
  };

  // Copy URL without an anchor link.
  Copy.prototype._copyUrl = function() {

    this._field.value = window.location.href.replace( /\#\d$/i, "" );

    this._field.focus();

    this._field.select();

    document.execCommand("Copy");
  };

  Copy.prototype._showMessage = function() {

    this._field.blur();

    this._field.value = "Ссылка скопирована!";
  };

  Copy.prototype.listen = function() {
    this._trigger.addEventListener( "click", this._handle.bind(this) );
  };

  var copyUrl = new Copy();

  copyUrl.listen();

})();
/**
 * Scroll page to top.
 * @param {string} options.selector - Button selector.
 * @param {number} [options.step=150] - Animation speed in pixels.
 * @version 4.0.1
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
class ScrollButton {

  constructor( options ) {
    this.button = document.querySelector( options.button );
    this.step = options.step || 150;
  }

  listenButton() {
    this.button.onclick = this.scrollUp.bind(this);
  }

  scrollUp() {
    let timeOut;

    if (document.documentElement.scrollTop !=0 || document.body.scrollTop !=0) {

      window.scrollBy( 0, -this.step );

      timeOut = setTimeout(() => {

        this.scrollUp();

      }, 20 );

    } else {

      clearTimeout( timeOut );
    }
  }

  /**
   * @param {number} threshold - Offset from top that show up the button.
   */
  handleVisibility( threshold ) {

    window.addEventListener("scroll", () => {

      if ( pageYOffset > threshold ) {
        this.button.classList.add("is-active");
      } else {
        this.button.classList.remove("is-active");
      }
    });
  }
}

const scrollButton = new ScrollButton({
  button: ".js-scroll-button-toggle",
  step: 300
});

scrollButton.listenButton();

scrollButton.handleVisibility( document.documentElement.clientHeight * 1.5 );